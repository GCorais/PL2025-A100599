
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALNELTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVMODAND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GE GT ID IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NUMBER OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL RPAREN SEMICOLON STRING STRING_LITERAL THEN TIMES TO TRUE VAR WHILE WRITE WRITELNprograma : PROGRAM ID SEMICOLON bloco DOTbloco : VAR declaracoes BEGIN instrucoes ENDbloco : BEGIN instrucoes ENDdeclaracoes : declaracoes declaracao\n                   | declaracao\n                   | emptydeclaracao : lista_ids COLON tipo SEMICOLONlista_ids : ID\n                 | lista_ids COMMA IDtipo : INTEGER\n            | BOOLEAN\n            | STRING\n            | REALtipo : ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF tipoinstrucoes : statement_liststatement_list : statement_list SEMICOLON statementstatement_list : statement_list SEMICOLONstatement_list : statementstatement : atribuicao_instr_only\n                 | leitura_stmt\n                 | escrita_stmt\n                 | if_then_else\n                 | if_then\n                 | while_stmt\n                 | for_stmt\n                 | bloco_instratribuicao_instr_only : ID ASSIGN expressaoleitura_stmt : READLN LPAREN ID RPARENescrita_stmt : WRITELN LPAREN exp_list RPARENescrita_stmt : WRITE LPAREN exp_list RPARENexp_list : expressao\n                | exp_list COMMA expressaoif_then_else : IF expressao THEN statement ELSE statementif_then : IF expressao THEN statementwhile_stmt : WHILE expressao DO statementfor_stmt : FOR ID ASSIGN expressao TO expressao DO statement\n                | FOR ID ASSIGN expressao DOWNTO expressao DO statementbloco_instr : BEGIN instrucoes ENDexpressao : expressao PLUS expressao\n                 | expressao MINUS expressao\n                 | expressao TIMES expressao\n                 | expressao DIVIDE expressao\n                 | expressao DIV expressao\n                 | expressao MOD expressao\n                 | expressao EQUAL expressao\n                 | expressao NE expressao\n                 | expressao LT expressao\n                 | expressao LE expressao\n                 | expressao GT expressao\n                 | expressao GE expressao\n                 | expressao AND expressao\n                 | expressao OR expressaoexpressao : LPAREN expressao RPARENexpressao : IDexpressao : NUMBERexpressao : STRING_LITERALexpressao : TRUEexpressao : FALSEempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,6,7,9,10,11,14,30,31,32,33,34,36,39,40,41,42,43,45,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,87,91,113,114,115,121,122,],[3,13,26,13,-5,-6,26,46,46,52,26,-4,60,26,46,64,46,46,46,26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,26,46,-7,46,26,46,46,26,26,]),'SEMICOLON':([3,16,17,18,19,20,21,22,23,24,25,39,46,47,48,49,50,54,55,56,57,58,61,62,63,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,117,124,125,127,],[4,39,-18,-19,-20,-21,-22,-23,-24,-25,-26,-17,-54,-55,-56,-57,-58,87,-10,-11,-12,-13,-38,-16,-27,-28,-29,-30,-34,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-35,-33,-36,-37,-14,]),'VAR':([4,],[6,]),'BEGIN':([4,6,7,9,10,11,14,33,34,39,68,84,87,113,121,122,],[7,-59,14,33,-5,-6,14,14,-4,14,14,14,-7,14,14,14,]),'DOT':([5,38,86,],[8,-3,-2,]),'READLN':([7,14,33,39,68,84,113,121,122,],[27,27,27,27,27,27,27,27,27,]),'WRITELN':([7,14,33,39,68,84,113,121,122,],[28,28,28,28,28,28,28,28,28,]),'WRITE':([7,14,33,39,68,84,113,121,122,],[29,29,29,29,29,29,29,29,29,]),'IF':([7,14,33,39,68,84,113,121,122,],[30,30,30,30,30,30,30,30,30,]),'WHILE':([7,14,33,39,68,84,113,121,122,],[31,31,31,31,31,31,31,31,31,]),'FOR':([7,14,33,39,68,84,113,121,122,],[32,32,32,32,32,32,32,32,32,]),'COLON':([12,13,60,],[35,-8,-9,]),'COMMA':([12,13,46,47,48,49,50,60,65,66,67,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,],[36,-8,-54,-55,-56,-57,-58,-9,91,-31,91,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-32,]),'END':([15,16,17,18,19,20,21,22,23,24,25,37,39,46,47,48,49,50,53,61,62,63,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,117,124,125,],[38,-15,-18,-19,-20,-21,-22,-23,-24,-25,-26,61,-17,-54,-55,-56,-57,-58,86,-38,-16,-27,-28,-29,-30,-34,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-35,-33,-36,-37,]),'ELSE':([18,19,20,21,22,23,24,25,46,47,48,49,50,61,63,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,117,124,125,],[-19,-20,-21,-22,-23,-24,-25,-26,-54,-55,-56,-57,-58,-38,-27,-28,-29,-30,113,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-35,-33,-36,-37,]),'ASSIGN':([26,52,],[40,85,]),'LPAREN':([27,28,29,30,31,40,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,91,114,115,],[41,42,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'NUMBER':([30,31,40,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,88,91,114,115,116,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,111,47,47,47,120,]),'STRING_LITERAL':([30,31,40,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,91,114,115,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([30,31,40,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,91,114,115,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([30,31,40,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,91,114,115,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'INTEGER':([35,126,],[55,55,]),'BOOLEAN':([35,126,],[56,56,]),'STRING':([35,126,],[57,57,]),'REAL':([35,126,],[58,58,]),'ARRAY':([35,126,],[59,59,]),'THEN':([44,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,],[68,-54,-55,-56,-57,-58,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,]),'PLUS':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[69,-54,-55,-56,-57,-58,69,69,69,69,-39,-40,-41,-42,-43,-44,69,69,69,69,69,69,69,69,-53,69,69,69,69,]),'MINUS':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[70,-54,-55,-56,-57,-58,70,70,70,70,-39,-40,-41,-42,-43,-44,70,70,70,70,70,70,70,70,-53,70,70,70,70,]),'TIMES':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[71,-54,-55,-56,-57,-58,71,71,71,71,71,71,-41,-42,-43,-44,71,71,71,71,71,71,71,71,-53,71,71,71,71,]),'DIVIDE':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[72,-54,-55,-56,-57,-58,72,72,72,72,72,72,-41,-42,-43,-44,72,72,72,72,72,72,72,72,-53,72,72,72,72,]),'DIV':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[73,-54,-55,-56,-57,-58,73,73,73,73,73,73,-41,-42,-43,-44,73,73,73,73,73,73,73,73,-53,73,73,73,73,]),'MOD':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[74,-54,-55,-56,-57,-58,74,74,74,74,74,74,-41,-42,-43,-44,74,74,74,74,74,74,74,74,-53,74,74,74,74,]),'EQUAL':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[75,-54,-55,-56,-57,-58,75,75,75,75,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,75,75,-53,75,75,75,75,]),'NE':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[76,-54,-55,-56,-57,-58,76,76,76,76,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,76,76,-53,76,76,76,76,]),'LT':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[77,-54,-55,-56,-57,-58,77,77,77,77,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,77,77,-53,77,77,77,77,]),'LE':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[78,-54,-55,-56,-57,-58,78,78,78,78,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,78,78,-53,78,78,78,78,]),'GT':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[79,-54,-55,-56,-57,-58,79,79,79,79,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,79,79,-53,79,79,79,79,]),'GE':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[80,-54,-55,-56,-57,-58,80,80,80,80,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,80,80,-53,80,80,80,80,]),'AND':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[81,-54,-55,-56,-57,-58,81,81,81,81,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,81,-53,81,81,81,81,]),'OR':([44,46,47,48,49,50,51,63,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,118,119,],[82,-54,-55,-56,-57,-58,82,82,82,82,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,82,82,82,82,]),'DO':([46,47,48,49,50,51,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,118,119,],[-54,-55,-56,-57,-58,84,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,121,122,]),'RPAREN':([46,47,48,49,50,64,65,66,67,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,],[-54,-55,-56,-57,-58,89,90,-31,92,108,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-32,]),'TO':([46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,],[-54,-55,-56,-57,-58,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,114,]),'DOWNTO':([46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,],[-54,-55,-56,-57,-58,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,115,]),'LBRACKET':([59,],[88,]),'DOTDOT':([111,],[116,]),'RBRACKET':([120,],[123,]),'OF':([123,],[126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'bloco':([4,],[5,]),'declaracoes':([6,],[9,]),'declaracao':([6,9,],[10,34,]),'empty':([6,],[11,]),'lista_ids':([6,9,],[12,12,]),'instrucoes':([7,14,33,],[15,37,53,]),'statement_list':([7,14,33,],[16,16,16,]),'statement':([7,14,33,39,68,84,113,121,122,],[17,17,17,62,93,109,117,124,125,]),'atribuicao_instr_only':([7,14,33,39,68,84,113,121,122,],[18,18,18,18,18,18,18,18,18,]),'leitura_stmt':([7,14,33,39,68,84,113,121,122,],[19,19,19,19,19,19,19,19,19,]),'escrita_stmt':([7,14,33,39,68,84,113,121,122,],[20,20,20,20,20,20,20,20,20,]),'if_then_else':([7,14,33,39,68,84,113,121,122,],[21,21,21,21,21,21,21,21,21,]),'if_then':([7,14,33,39,68,84,113,121,122,],[22,22,22,22,22,22,22,22,22,]),'while_stmt':([7,14,33,39,68,84,113,121,122,],[23,23,23,23,23,23,23,23,23,]),'for_stmt':([7,14,33,39,68,84,113,121,122,],[24,24,24,24,24,24,24,24,24,]),'bloco_instr':([7,14,33,39,68,84,113,121,122,],[25,25,25,25,25,25,25,25,25,]),'expressao':([30,31,40,42,43,45,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,91,114,115,],[44,51,63,66,66,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,118,119,]),'tipo':([35,126,],[54,127,]),'exp_list':([42,43,],[65,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON bloco DOT','programa',5,'p_programa','parser.py',351),
  ('bloco -> VAR declaracoes BEGIN instrucoes END','bloco',5,'p_bloco_com_var','parser.py',355),
  ('bloco -> BEGIN instrucoes END','bloco',3,'p_bloco_sem_var','parser.py',359),
  ('declaracoes -> declaracoes declaracao','declaracoes',2,'p_declaracoes','parser.py',363),
  ('declaracoes -> declaracao','declaracoes',1,'p_declaracoes','parser.py',364),
  ('declaracoes -> empty','declaracoes',1,'p_declaracoes','parser.py',365),
  ('declaracao -> lista_ids COLON tipo SEMICOLON','declaracao',4,'p_declaracao','parser.py',375),
  ('lista_ids -> ID','lista_ids',1,'p_lista_ids','parser.py',389),
  ('lista_ids -> lista_ids COMMA ID','lista_ids',3,'p_lista_ids','parser.py',390),
  ('tipo -> INTEGER','tipo',1,'p_tipo_primitivo','parser.py',397),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo_primitivo','parser.py',398),
  ('tipo -> STRING','tipo',1,'p_tipo_primitivo','parser.py',399),
  ('tipo -> REAL','tipo',1,'p_tipo_primitivo','parser.py',400),
  ('tipo -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF tipo','tipo',8,'p_tipo_array','parser.py',404),
  ('instrucoes -> statement_list','instrucoes',1,'p_instrucoes','parser.py',408),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_multi','parser.py',412),
  ('statement_list -> statement_list SEMICOLON','statement_list',2,'p_statement_list_trail','parser.py',416),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','parser.py',420),
  ('statement -> atribuicao_instr_only','statement',1,'p_statement','parser.py',424),
  ('statement -> leitura_stmt','statement',1,'p_statement','parser.py',425),
  ('statement -> escrita_stmt','statement',1,'p_statement','parser.py',426),
  ('statement -> if_then_else','statement',1,'p_statement','parser.py',427),
  ('statement -> if_then','statement',1,'p_statement','parser.py',428),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',429),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',430),
  ('statement -> bloco_instr','statement',1,'p_statement','parser.py',431),
  ('atribuicao_instr_only -> ID ASSIGN expressao','atribuicao_instr_only',3,'p_atribuicao_instr_only','parser.py',435),
  ('leitura_stmt -> READLN LPAREN ID RPAREN','leitura_stmt',4,'p_leitura_stmt','parser.py',439),
  ('escrita_stmt -> WRITELN LPAREN exp_list RPAREN','escrita_stmt',4,'p_escrita_stmt_writeln','parser.py',443),
  ('escrita_stmt -> WRITE LPAREN exp_list RPAREN','escrita_stmt',4,'p_escrita_stmt_write','parser.py',447),
  ('exp_list -> expressao','exp_list',1,'p_exp_list','parser.py',451),
  ('exp_list -> exp_list COMMA expressao','exp_list',3,'p_exp_list','parser.py',452),
  ('if_then_else -> IF expressao THEN statement ELSE statement','if_then_else',6,'p_if_then_else','parser.py',459),
  ('if_then -> IF expressao THEN statement','if_then',4,'p_if_then','parser.py',466),
  ('while_stmt -> WHILE expressao DO statement','while_stmt',4,'p_while_stmt','parser.py',472),
  ('for_stmt -> FOR ID ASSIGN expressao TO expressao DO statement','for_stmt',8,'p_for_stmt','parser.py',478),
  ('for_stmt -> FOR ID ASSIGN expressao DOWNTO expressao DO statement','for_stmt',8,'p_for_stmt','parser.py',479),
  ('bloco_instr -> BEGIN instrucoes END','bloco_instr',3,'p_bloco_instr','parser.py',492),
  ('expressao -> expressao PLUS expressao','expressao',3,'p_expressao_binaria','parser.py',498),
  ('expressao -> expressao MINUS expressao','expressao',3,'p_expressao_binaria','parser.py',499),
  ('expressao -> expressao TIMES expressao','expressao',3,'p_expressao_binaria','parser.py',500),
  ('expressao -> expressao DIVIDE expressao','expressao',3,'p_expressao_binaria','parser.py',501),
  ('expressao -> expressao DIV expressao','expressao',3,'p_expressao_binaria','parser.py',502),
  ('expressao -> expressao MOD expressao','expressao',3,'p_expressao_binaria','parser.py',503),
  ('expressao -> expressao EQUAL expressao','expressao',3,'p_expressao_binaria','parser.py',504),
  ('expressao -> expressao NE expressao','expressao',3,'p_expressao_binaria','parser.py',505),
  ('expressao -> expressao LT expressao','expressao',3,'p_expressao_binaria','parser.py',506),
  ('expressao -> expressao LE expressao','expressao',3,'p_expressao_binaria','parser.py',507),
  ('expressao -> expressao GT expressao','expressao',3,'p_expressao_binaria','parser.py',508),
  ('expressao -> expressao GE expressao','expressao',3,'p_expressao_binaria','parser.py',509),
  ('expressao -> expressao AND expressao','expressao',3,'p_expressao_binaria','parser.py',510),
  ('expressao -> expressao OR expressao','expressao',3,'p_expressao_binaria','parser.py',511),
  ('expressao -> LPAREN expressao RPAREN','expressao',3,'p_expressao_grupo','parser.py',518),
  ('expressao -> ID','expressao',1,'p_expressao_id','parser.py',522),
  ('expressao -> NUMBER','expressao',1,'p_expressao_num','parser.py',526),
  ('expressao -> STRING_LITERAL','expressao',1,'p_expressao_str','parser.py',530),
  ('expressao -> TRUE','expressao',1,'p_expressao_true','parser.py',534),
  ('expressao -> FALSE','expressao',1,'p_expressao_false','parser.py',538),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',542),
]
